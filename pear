#!/bin/sh

# Exit immediately if a command exits with a non-zero status.
set -o errexit 

# Grab the full path to the git-pear project directory
pear_dir=$(cd $( dirname $(readlink $0 )); pwd)

# The dir with all the git-pear commands
pear_commands_dir=$pear_dir/libexec

# Commands that pear directly calls
usage_command=$pear_commands_dir/usage
add_command=$pear_commands_dir/add

# Alias command to the first arg
command=$1

# The full path to the intended command
command_path=$pear_commands_dir/$command

# Exit with info if not a git directory
if ! git rev-parse --git-dir > /dev/null 2>&1; then
  echo "Pear adds pairs to local git directories only."
  echo "Please try using pear in a git repository"
  exit 1
else
    git_dir=$(git rev-parse --git-dir)
fi

# If no command was given resume normal git operation
test -n "$command" || {
  if $pear_commands_dir/get-emails > /dev/null 2>&1; then
    $pear_commands_dir/quit
  else
    $usage_command
  fi
  exit 0 
}

# If the first argument is an email address call the add command
if [[ $command =~ @ ]]; then
  
  # Uninstall any already existing users
  $pear_commands_dir/quit
  
  # Handle case with one email
  test $2 || exec $pear_commands_dir/solo $command
    
  # Replace the current process with a process created by invoking the add
  # command with all args
  exec $add_command "${@}"
fi

# If intended command does not exist tell the user and exit with error
test -x $command_path || {
  echo "Unknown Command:   $command"
  $usage_command
  exit 1
}

# Replace the current process with a process created by invoking the command with
# all args except the first (which was the command name)
exec $command_path "${@:2}"
